<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-11-20T11:25:44+00:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Mário Rodrigues</title><subtitle>Software Engineering student</subtitle><entry><title type="html">The Hidden Cost of Bad Codebases in Production - The Role of Consultancies</title><link href="http://localhost:4000/2024/08/15/bad-codebases.html" rel="alternate" type="text/html" title="The Hidden Cost of Bad Codebases in Production - The Role of Consultancies" /><published>2024-08-15T00:00:00+01:00</published><updated>2024-08-15T00:00:00+01:00</updated><id>http://localhost:4000/2024/08/15/bad-codebases</id><content type="html" xml:base="http://localhost:4000/2024/08/15/bad-codebases.html"><![CDATA[<h3 id="introduction">Introduction</h3>
<p>I’ve never worked at a consultancy myself, I’ve had the opportunity to dive into codebases that were initially developed by consulting firms. What I found was eye-opening: a mix of hurried patches, minimal documentation, and a mountain of technical debt.</p>

<p>This article explores the hidden costs of these bad codebases in production and why they often become a burden on the companies that rely on them.</p>

<h4 id="lets-get-started"><strong>Let’s get started</strong></h4>

<p>In the fast-paced world of software development, companies often rely on consultancies to help bring their products to market quickly. There’s a dark side to this arrangement: bad codebases. When consultancies deliver suboptimal code, it can have far-reaching consequences for the product, the company, and its customers. This article explores how and why bad codebases make their way into production and the impact they have on the long-term success of a project.</p>

<h3 id="the-race-to-deliver-speed-vs-quality">The Race to Deliver: Speed vs. Quality</h3>

<p>Consultancies are often brought in with tight deadlines and aggressive project timelines. The pressure to deliver quickly can lead to shortcuts in the development process. These shortcuts may include:</p>

<ul>
  <li>
    <p><strong>Lack of Proper Documentation:</strong> To save time, documentation may be minimal or entirely absent. This makes it difficult for future developers to understand the codebase, leading to maintenance challenges.</p>
  </li>
  <li>
    <p><strong>Technical Debt:</strong> To meet deadlines, consultancies might implement quick fixes rather than long-term solutions. This creates technical debt that accumulates over time, making the codebase increasingly difficult to manage.</p>
  </li>
  <li>
    <p><strong>Inadequate Testing:</strong> Rushed timelines often lead to insufficient testing. Bugs and vulnerabilities may go unnoticed until they become critical issues in production.</p>
  </li>
</ul>

<p>By neglecting these clean code principles, consultancies may deliver a product that meets immediate requirements but sets up a precarious foundation. The resulting codebase becomes a labyrinth that’s not only hard to navigate but also expensive to refactor or extend, thereby impeding the software’s evolution and scalability.</p>

<h3 id="the-transient-nature-of-consultancy-engagements">The Transient Nature of Consultancy Engagements</h3>

<p>Consultancies are typically engaged for a specific project or period. Once the engagement ends, the consultants move on to their next project, leaving the client to manage the codebase. This can create several problems:</p>

<ul>
  <li>
    <p><strong>Lack of Ownership:</strong> Since consultants aren’t typically involved in the long-term maintenance of the codebase, there’s less incentive for them to ensure the code is clean, well-documented, and maintainable.</p>
  </li>
  <li>
    <p><strong>Knowledge Transfer Gaps:</strong> The transition from consultants to in-house teams often lacks proper knowledge transfer. In-house developers may struggle to understand and work with the codebase, leading to inefficiencies and errors.</p>
  </li>
  <li>
    <p><strong>High Turnover:</strong> The high turnover rate in consultancy firms means that the developers who originally worked on the project may no longer be available to provide support, leaving the client without a knowledgeable resource to turn to.</p>
  </li>
</ul>

<h3 id="the-impact-of-bad-codebases-on-production">The Impact of Bad Codebases on Production</h3>

<p>A bad codebase doesn’t just cause headaches for developers; it can have serious implications for the business as well:</p>

<ul>
  <li>
    <p><strong>Increased Costs:</strong> Maintaining and fixing a bad codebase requires more time and resources, leading to higher costs. What seemed like a cost-effective solution in the short term can become a financial burden in the long term.</p>
  </li>
  <li>
    <p><strong>Slower Development Cycles:</strong> As technical debt accumulates, it slows down the development process. Adding new features or fixing bugs becomes increasingly difficult, delaying product updates and new releases.</p>
  </li>
  <li>
    <p><strong>Poor User Experience:</strong> Bugs and performance issues that stem from a bad codebase can negatively impact the user experience. This can lead to customer dissatisfaction, increased churn rates, and a damaged reputation.</p>
  </li>
</ul>

<h3 id="why-do-bad-codebases-happen">Why Do Bad Codebases Happen?</h3>

<p>Several factors contribute to the prevalence of bad codebases delivered by consultancies:</p>

<ol>
  <li>
    <p><strong>Misaligned Incentives:</strong> Consultancies are often rewarded for delivering on time and within budget, not for the quality of the code they produce. This misalignment of incentives encourages speed over quality.</p>
  </li>
  <li>
    <p><strong>Lack of Long-Term Perspective:</strong> Since consultancies are typically focused on short-term projects, there’s little consideration for the long-term health of the codebase.</p>
  </li>
  <li>
    <p><strong>Insufficient Oversight:</strong> Clients may lack the technical expertise to properly oversee the work being done by the consultancy, leading to suboptimal code being accepted into production.</p>
  </li>
</ol>

<h3 id="mitigating-the-risk-of-bad-codebases">Mitigating the Risk of Bad Codebases</h3>

<p>While the risk of receiving a bad codebase from a consultancy cannot be entirely eliminated, there are steps that companies can take to mitigate this risk:</p>

<ul>
  <li>
    <p><strong>Set Clear Expectations:</strong> Clearly communicate the importance of code quality, maintainability, and documentation from the outset of the project. Make these factors part of the success criteria.</p>
  </li>
  <li>
    <p><strong>Engage in Code Reviews:</strong> Regular code reviews involving both consultancy and in-house developers can help catch issues early and ensure that the codebase meets the required standards.</p>
  </li>
  <li>
    <p><strong>Prioritize Knowledge Transfer:</strong> Ensure that there’s a formal process for knowledge transfer from the consultancy to the in-house team. This includes comprehensive documentation and training sessions.</p>
  </li>
  <li>
    <p><strong>Continuous Integration and Testing:</strong> Implement continuous integration and automated testing to catch bugs and issues as they arise, rather than allowing them to accumulate.</p>
  </li>
</ul>

<h3 id="conclusion">Conclusion</h3>

<p>Bad codebases delivered by consultancies can have a profound impact on the long-term success of a company project, so make sure when you are asking a consultant to do it, review their past work, and establish clear, ongoing communication to ensure that the quality and maintainability of the code meet your project’s needs and standards.</p>]]></content><author><name></name></author><summary type="html"><![CDATA[Introduction I’ve never worked at a consultancy myself, I’ve had the opportunity to dive into codebases that were initially developed by consulting firms. What I found was eye-opening: a mix of hurried patches, minimal documentation, and a mountain of technical debt. This article explores the hidden costs of these bad codebases in production and why they often become a burden on the companies that rely on them. Let’s get started In the fast-paced world of software development, companies often rely on consultancies to help bring their products to market quickly. There’s a dark side to this arrangement: bad codebases. When consultancies deliver suboptimal code, it can have far-reaching consequences for the product, the company, and its customers. This article explores how and why bad codebases make their way into production and the impact they have on the long-term success of a project. The Race to Deliver: Speed vs. Quality Consultancies are often brought in with tight deadlines and aggressive project timelines. The pressure to deliver quickly can lead to shortcuts in the development process. These shortcuts may include: Lack of Proper Documentation: To save time, documentation may be minimal or entirely absent. This makes it difficult for future developers to understand the codebase, leading to maintenance challenges. Technical Debt: To meet deadlines, consultancies might implement quick fixes rather than long-term solutions. This creates technical debt that accumulates over time, making the codebase increasingly difficult to manage. Inadequate Testing: Rushed timelines often lead to insufficient testing. Bugs and vulnerabilities may go unnoticed until they become critical issues in production. By neglecting these clean code principles, consultancies may deliver a product that meets immediate requirements but sets up a precarious foundation. The resulting codebase becomes a labyrinth that’s not only hard to navigate but also expensive to refactor or extend, thereby impeding the software’s evolution and scalability. The Transient Nature of Consultancy Engagements Consultancies are typically engaged for a specific project or period. Once the engagement ends, the consultants move on to their next project, leaving the client to manage the codebase. This can create several problems: Lack of Ownership: Since consultants aren’t typically involved in the long-term maintenance of the codebase, there’s less incentive for them to ensure the code is clean, well-documented, and maintainable. Knowledge Transfer Gaps: The transition from consultants to in-house teams often lacks proper knowledge transfer. In-house developers may struggle to understand and work with the codebase, leading to inefficiencies and errors. High Turnover: The high turnover rate in consultancy firms means that the developers who originally worked on the project may no longer be available to provide support, leaving the client without a knowledgeable resource to turn to. The Impact of Bad Codebases on Production A bad codebase doesn’t just cause headaches for developers; it can have serious implications for the business as well: Increased Costs: Maintaining and fixing a bad codebase requires more time and resources, leading to higher costs. What seemed like a cost-effective solution in the short term can become a financial burden in the long term. Slower Development Cycles: As technical debt accumulates, it slows down the development process. Adding new features or fixing bugs becomes increasingly difficult, delaying product updates and new releases. Poor User Experience: Bugs and performance issues that stem from a bad codebase can negatively impact the user experience. This can lead to customer dissatisfaction, increased churn rates, and a damaged reputation. Why Do Bad Codebases Happen? Several factors contribute to the prevalence of bad codebases delivered by consultancies: Misaligned Incentives: Consultancies are often rewarded for delivering on time and within budget, not for the quality of the code they produce. This misalignment of incentives encourages speed over quality. Lack of Long-Term Perspective: Since consultancies are typically focused on short-term projects, there’s little consideration for the long-term health of the codebase. Insufficient Oversight: Clients may lack the technical expertise to properly oversee the work being done by the consultancy, leading to suboptimal code being accepted into production. Mitigating the Risk of Bad Codebases While the risk of receiving a bad codebase from a consultancy cannot be entirely eliminated, there are steps that companies can take to mitigate this risk: Set Clear Expectations: Clearly communicate the importance of code quality, maintainability, and documentation from the outset of the project. Make these factors part of the success criteria. Engage in Code Reviews: Regular code reviews involving both consultancy and in-house developers can help catch issues early and ensure that the codebase meets the required standards. Prioritize Knowledge Transfer: Ensure that there’s a formal process for knowledge transfer from the consultancy to the in-house team. This includes comprehensive documentation and training sessions. Continuous Integration and Testing: Implement continuous integration and automated testing to catch bugs and issues as they arise, rather than allowing them to accumulate. Conclusion Bad codebases delivered by consultancies can have a profound impact on the long-term success of a company project, so make sure when you are asking a consultant to do it, review their past work, and establish clear, ongoing communication to ensure that the quality and maintainability of the code meet your project’s needs and standards.]]></summary></entry><entry><title type="html">WWDC24 - Apple Worldwide Developers Conference</title><link href="http://localhost:4000/2024/06/10/wwdc24.html" rel="alternate" type="text/html" title="WWDC24 - Apple Worldwide Developers Conference" /><published>2024-06-10T00:00:00+01:00</published><updated>2024-06-10T00:00:00+01:00</updated><id>http://localhost:4000/2024/06/10/wwdc24</id><content type="html" xml:base="http://localhost:4000/2024/06/10/wwdc24.html"><![CDATA[<p>In this article, I’m going to share my thoughts on WWDC24, which was packed with exciting announcements and updates.</p>

<h4 id="ios-18">iOS 18</h4>
<p>Let’s start with iOS 18, which introduces a plethora of new customization options and cool features such as Messages via satellite. Updates to Messages, Photos, and Mail make them more productive and fun than ever! The inclusion of RCS in iMessage is also a significant feature, although Apple didn’t emphasize it much.</p>

<h4 id="ipados">iPadOS</h4>
<p>iPadOS has always been similar to iOS with a few extra features, but this time, Apple made it truly stand out with the addition of basic yet essential tools like a new calculator app and enhanced note-taking capabilities with Apple Pencil. The new graphing functionality is particularly impressive, and I wish I had these features when I was in high school.</p>

<h4 id="watchos">watchOS</h4>
<p>The new watchOS brings more customizability to fitness goals and additional measurements for overall health. My favorite update is the new intelligent Smart Stacks, which I believe Apple should have introduced last year when they first announced Smart Stacks.</p>

<h4 id="macos-sequoia">macOS Sequoia</h4>
<p>MacOS Sequoia seamlessly integrates with the iPhone and introduces some nice changes to the Desktop. The updates to Safari, announced during the macOS segment, are also time-saving. These small, AI-powered enhancements are typical of Apple’s announcements, but what really stood out was Apple Intelligence.</p>

<h4 id="apple-intelligence">Apple Intelligence</h4>

<p>The highlight of the event was Apple Intelligence, which takes full advantage of the Apple ecosystem and turns it into a service that can significantly impact our daily lives. With features like notification prioritization, image creation, and message summarization/rewriting, all powered by Siri and processed on-device to ensure privacy, Apple Intelligence showcases how Apple is leveraging AI technologies differently from the rest of the industry. This is just the beginning for Apple Intelligence, and I can’t wait to see what more Apple will bring in the coming years.</p>]]></content><author><name></name></author><summary type="html"><![CDATA[In this article, I’m going to share my thoughts on WWDC24, which was packed with exciting announcements and updates. iOS 18 Let’s start with iOS 18, which introduces a plethora of new customization options and cool features such as Messages via satellite. Updates to Messages, Photos, and Mail make them more productive and fun than ever! The inclusion of RCS in iMessage is also a significant feature, although Apple didn’t emphasize it much. iPadOS iPadOS has always been similar to iOS with a few extra features, but this time, Apple made it truly stand out with the addition of basic yet essential tools like a new calculator app and enhanced note-taking capabilities with Apple Pencil. The new graphing functionality is particularly impressive, and I wish I had these features when I was in high school. watchOS The new watchOS brings more customizability to fitness goals and additional measurements for overall health. My favorite update is the new intelligent Smart Stacks, which I believe Apple should have introduced last year when they first announced Smart Stacks. macOS Sequoia MacOS Sequoia seamlessly integrates with the iPhone and introduces some nice changes to the Desktop. The updates to Safari, announced during the macOS segment, are also time-saving. These small, AI-powered enhancements are typical of Apple’s announcements, but what really stood out was Apple Intelligence. Apple Intelligence The highlight of the event was Apple Intelligence, which takes full advantage of the Apple ecosystem and turns it into a service that can significantly impact our daily lives. With features like notification prioritization, image creation, and message summarization/rewriting, all powered by Siri and processed on-device to ensure privacy, Apple Intelligence showcases how Apple is leveraging AI technologies differently from the rest of the industry. This is just the beginning for Apple Intelligence, and I can’t wait to see what more Apple will bring in the coming years.]]></summary></entry><entry><title type="html">About Mr. Jensen Huang statement</title><link href="http://localhost:4000/2024/03/03/jensen-huang-statement.html" rel="alternate" type="text/html" title="About Mr. Jensen Huang statement" /><published>2024-03-03T00:00:00+00:00</published><updated>2024-03-03T00:00:00+00:00</updated><id>http://localhost:4000/2024/03/03/jensen-huang-statement</id><content type="html" xml:base="http://localhost:4000/2024/03/03/jensen-huang-statement.html"><![CDATA[<p>Jensen Huang’s recent comments about AI rendering coding obsolete might be more about generating clout than reflecting a distinctive understanding of the future of technology.</p>

<p>The debate over the future of coding has recently reignited. While some, like Nvidia’s CEO Jensen Huang, believe AI will make coding obsolete, others hold a different perspective. This article is an opposing viewpoint, exploring why coding might remain relevant despite the rise of artificial intelligence.</p>

<p>While advancements in AI are undeniable, suggesting it will completely replace the need for coding is an overly simplistic and potentially misleading view.
<strong>AI is not a silver bullet</strong>. While AI tools can automate repetitive tasks and generate code, they are not a one-size-fits-all solution.</p>

<p>Complex projects still require human expertise in areas like:</p>
<ol>
  <li><strong>Critical Thinking and Problem-Solving</strong>: Identifying the problem, defining its scope, and crafting the right solution are crucial steps that AI cannot fully replace.</li>
  <li><strong>Domain Expertise</strong>: Understanding the specific industry or application is essential for creating effective and efficient code. AI, while powerful, cannot replicate the human capacity for experience and specialized knowledge.</li>
  <li><strong>Creativity and innovation</strong>: Pushing boundaries and developing new technologies often requires human ingenuity and the ability to think outside the box.</li>
</ol>

<p>The future of work may involve collaboration: Instead of AI replacing coding entirely, it’s more likely we’ll see a shift towards humans and AI working together. Developers may utilize AI tools to streamline tasks, <strong>allowing them to focus on higher-level aspects like design, architecture, and problem-solving</strong>.</p>

<p>Learning to code can still be valuable, even if the specific coding languages change or become more user-friendly, the underlying logic and problem-solving skills gained through coding remain valuable. These skills can be applied in various fields, not just programming, and foster critical thinking, analytical reasoning, and computational thinking.</p>

<p>Therefore, while AI brings exciting advancements, it’s crucial to maintain a nuanced understanding of its capabilities and limitations.</p>

<p>In conclusion, while <strong>AI undoubtedly presents exciting advancements</strong>, it is crucial to maintain a balanced perspective on its capabilities and limitations. Coding, along with its core principles, will likely continue to play a significant role in the future, even if its form and application evolve alongside AI.</p>]]></content><author><name></name></author><summary type="html"><![CDATA[Jensen Huang’s recent comments about AI rendering coding obsolete might be more about generating clout than reflecting a distinctive understanding of the future of technology. The debate over the future of coding has recently reignited. While some, like Nvidia’s CEO Jensen Huang, believe AI will make coding obsolete, others hold a different perspective. This article is an opposing viewpoint, exploring why coding might remain relevant despite the rise of artificial intelligence. While advancements in AI are undeniable, suggesting it will completely replace the need for coding is an overly simplistic and potentially misleading view. AI is not a silver bullet. While AI tools can automate repetitive tasks and generate code, they are not a one-size-fits-all solution. Complex projects still require human expertise in areas like: Critical Thinking and Problem-Solving: Identifying the problem, defining its scope, and crafting the right solution are crucial steps that AI cannot fully replace. Domain Expertise: Understanding the specific industry or application is essential for creating effective and efficient code. AI, while powerful, cannot replicate the human capacity for experience and specialized knowledge. Creativity and innovation: Pushing boundaries and developing new technologies often requires human ingenuity and the ability to think outside the box. The future of work may involve collaboration: Instead of AI replacing coding entirely, it’s more likely we’ll see a shift towards humans and AI working together. Developers may utilize AI tools to streamline tasks, allowing them to focus on higher-level aspects like design, architecture, and problem-solving. Learning to code can still be valuable, even if the specific coding languages change or become more user-friendly, the underlying logic and problem-solving skills gained through coding remain valuable. These skills can be applied in various fields, not just programming, and foster critical thinking, analytical reasoning, and computational thinking. Therefore, while AI brings exciting advancements, it’s crucial to maintain a nuanced understanding of its capabilities and limitations. In conclusion, while AI undoubtedly presents exciting advancements, it is crucial to maintain a balanced perspective on its capabilities and limitations. Coding, along with its core principles, will likely continue to play a significant role in the future, even if its form and application evolve alongside AI.]]></summary></entry><entry><title type="html">From OSInt to your own Database</title><link href="http://localhost:4000/2024/01/29/open-source-information.html" rel="alternate" type="text/html" title="From OSInt to your own Database" /><published>2024-01-29T00:00:00+00:00</published><updated>2024-01-29T00:00:00+00:00</updated><id>http://localhost:4000/2024/01/29/open-source-information</id><content type="html" xml:base="http://localhost:4000/2024/01/29/open-source-information.html"><![CDATA[<h2 id="introduction">Introduction</h2>
<p>First of all, you may all ask what is <b>OSInt</b>? <b>OSInt</b> is the process of collecting information about a target through publicly available information. 
This information can be used to perform a cyber attack or to perform a social engineering attack.</p>

<p>This article isn’t an instruction on how to perform a cyber attack or social engineering attack, but rather a guide on how to collect information about a target.</p>

<h2 id="what-is-a-target">What is a target?</h2>
<p>A target can be a person, a company, a website, a server, a network, or anything that you want to collect information about.</p>

<h2 id="what-is-publicly-available-information">What is publicly available information?</h2>
<p>Publicly available information is any information that is available to the public. This information can be found on the internet, in the news, in the phone book, or anywhere else that is available to the public.</p>

<h2 id="how-to-collect-information-about-a-target">How to collect information about a target?</h2>
<p>There are several ways to collect information about a target. 
The common ways are:</p>
<ul>
  <li>Search engines</li>
  <li>Social media</li>
  <li>News</li>
  <li>Phone book</li>
  <li>Public records</li>
  <li>Public databases</li>
  <li>Public forums</li>
  <li>Public Websites</li>
  <li>Public APIs</li>
</ul>

<p>Instead of going through each of these methods, I will show you how to use them in a real life example.</p>

<p><b>Disclaimer:</b> Any of the sites mentioned in this article are not affiliated with me in any way, and I am not responsible for any of the information that you may find on them.</p>

<p>Let’s start, I will show you how to collect information about a target, with 3 different examples, with 3 different types of information.</p>

<h3 id="example-1">Example 1</h3>
<p>For this example we will use the target <b>John Doe</b>, and let’s assume that i know him from Boston, MA.</p>

<p>I would start by using <a href="truthfinder.com">truthfinder.com</a> to search for the target, in this website you can specify the city and state to narrow down the search results.</p>

<p>This website will list a bunch of individuals with the name John Doe in Boston, MA, with some information about them like their age, relatives, and phone number.</p>

<p>Then you can choose the target that you are looking for, and it will give you more information about them such as <b>their full  list of criminal records, their social media accounts, their email address, and their address history</b>.</p>

<p>Based on the information mentioned above, you can now search for the target on social media, and you can also search for their email address on google to find more information about them.</p>

<p>There are several other websites that you can use to collect information about a target, such as <a href="https://www.beenverified.com/">beenverified.com</a>, <a href="https://www.intelius.com/">intelius.com</a>, <a href="https://www.instantcheckmate.com/">instantcheckmate.com</a>, and <a href="https://www.spokeo.com/">spokeo.com</a>.</p>

<h3 id="example-2">Example 2</h3>

<p>For this example we will use the target <b>John Doe</b>, aswell, but this time let’s assume that i only know his email address that is <b>johndoe@gmail.com</b>.</p>

<p>I would start by using <a href="https://www.epieos.com/">epieos.com</a> to search for the specified email address, this website will list a bunch of websites that are associated with the email address, and it will also list the social media accounts that are associated with the email address.</p>

<p>In case you want to store the information that you found, you can download the results as a CSV or JSON file, and insert them into a database, with a simple association.</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">UserData</span> <span class="p">(</span>
    <span class="n">email</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">255</span><span class="p">)</span> <span class="k">PRIMARY</span> <span class="k">KEY</span><span class="p">,</span>
    <span class="n">websites</span> <span class="nb">TEXT</span><span class="p">,</span>
    <span class="n">social_media_profiles</span> <span class="nb">TEXT</span><span class="p">,</span>
    <span class="n">additional_info</span> <span class="nb">TEXT</span>
<span class="p">);</span>
</code></pre></div></div>
<p>so you can query them later, like this:</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">UserData</span> <span class="k">WHERE</span> <span class="n">email</span> <span class="o">=</span> <span class="s1">'johndoe@gmail.com'</span><span class="p">;</span>
</code></pre></div></div>

<p><b>Epieos</b> also return a valuable information, which is if you have been pwned or not, and if you have been pwned, it will list the websites that you have been pwned on.</p>

<h3 id="example-3">Example 3</h3>

<p>For this example we will use the target <b>John Doe</b>, aswell, but this time let’s assume that i only know his phone number that is <b>555-555-5555</b>.</p>

<p>I would start by using <a href="https://www.spydialer.com/">spydialer.com</a> to search for the specified phone number, this website will list a bunch of individuals with the name John Doe, with some information about them like their age, relatives, and address.</p>

<p>Then you can choose the target that you are looking for, and it will give you more information about them such as <b>their social media accounts, their email address, and their address history</b>.</p>

<p>Based on the information mentioned above, you can now search for the target on social media, and you can also search for their email address on google to find more information about them.</p>

<h2 id="can-i-protect-myself-from-osint">Can I protect myself from OSInt?</h2>
<p>Well, the short answer is <b>no</b>, you can’t protect yourself from OSInt, but <b>you can make it harder for someone to collect information about you</b>.</p>

<p><b>How can you make it harder?</b></p>
<ul>
  <li>Use pseudonyms instead of your real name whenever it is possible.</li>
  <li>Be mindful of what sensitive information you share online, such as your phone number, credit card number, and address.</li>
  <li>Monitor your presence on the internet, by searching for your name, email address, and phone number with some of the websites mentioned above.</li>
  <li>Be skeptical of any emails, phone calls, or text messages that you receive from unknown sources.</li>
</ul>

<h2 id="conclusion">Conclusion</h2>

<p>The intention of this article isn’t to teach or hurt anyone, but rather to show you how easy it is to collect information about a target, and how to protect yourself from it.</p>

<p>In this article, I showed you how to collect information about a target, and save it for later use, and how to protect yourself from OSInt.</p>]]></content><author><name></name></author><summary type="html"><![CDATA[Introduction First of all, you may all ask what is OSInt? OSInt is the process of collecting information about a target through publicly available information. This information can be used to perform a cyber attack or to perform a social engineering attack. This article isn’t an instruction on how to perform a cyber attack or social engineering attack, but rather a guide on how to collect information about a target. What is a target? A target can be a person, a company, a website, a server, a network, or anything that you want to collect information about. What is publicly available information? Publicly available information is any information that is available to the public. This information can be found on the internet, in the news, in the phone book, or anywhere else that is available to the public. How to collect information about a target? There are several ways to collect information about a target. The common ways are: Search engines Social media News Phone book Public records Public databases Public forums Public Websites Public APIs Instead of going through each of these methods, I will show you how to use them in a real life example. Disclaimer: Any of the sites mentioned in this article are not affiliated with me in any way, and I am not responsible for any of the information that you may find on them. Let’s start, I will show you how to collect information about a target, with 3 different examples, with 3 different types of information. Example 1 For this example we will use the target John Doe, and let’s assume that i know him from Boston, MA. I would start by using truthfinder.com to search for the target, in this website you can specify the city and state to narrow down the search results. This website will list a bunch of individuals with the name John Doe in Boston, MA, with some information about them like their age, relatives, and phone number. Then you can choose the target that you are looking for, and it will give you more information about them such as their full list of criminal records, their social media accounts, their email address, and their address history. Based on the information mentioned above, you can now search for the target on social media, and you can also search for their email address on google to find more information about them. There are several other websites that you can use to collect information about a target, such as beenverified.com, intelius.com, instantcheckmate.com, and spokeo.com. Example 2 For this example we will use the target John Doe, aswell, but this time let’s assume that i only know his email address that is johndoe@gmail.com. I would start by using epieos.com to search for the specified email address, this website will list a bunch of websites that are associated with the email address, and it will also list the social media accounts that are associated with the email address. In case you want to store the information that you found, you can download the results as a CSV or JSON file, and insert them into a database, with a simple association. CREATE TABLE UserData ( email VARCHAR(255) PRIMARY KEY, websites TEXT, social_media_profiles TEXT, additional_info TEXT ); so you can query them later, like this: SELECT * FROM UserData WHERE email = 'johndoe@gmail.com'; Epieos also return a valuable information, which is if you have been pwned or not, and if you have been pwned, it will list the websites that you have been pwned on. Example 3 For this example we will use the target John Doe, aswell, but this time let’s assume that i only know his phone number that is 555-555-5555. I would start by using spydialer.com to search for the specified phone number, this website will list a bunch of individuals with the name John Doe, with some information about them like their age, relatives, and address. Then you can choose the target that you are looking for, and it will give you more information about them such as their social media accounts, their email address, and their address history. Based on the information mentioned above, you can now search for the target on social media, and you can also search for their email address on google to find more information about them. Can I protect myself from OSInt? Well, the short answer is no, you can’t protect yourself from OSInt, but you can make it harder for someone to collect information about you. How can you make it harder? Use pseudonyms instead of your real name whenever it is possible. Be mindful of what sensitive information you share online, such as your phone number, credit card number, and address. Monitor your presence on the internet, by searching for your name, email address, and phone number with some of the websites mentioned above. Be skeptical of any emails, phone calls, or text messages that you receive from unknown sources. Conclusion The intention of this article isn’t to teach or hurt anyone, but rather to show you how easy it is to collect information about a target, and how to protect yourself from it. In this article, I showed you how to collect information about a target, and save it for later use, and how to protect yourself from OSInt.]]></summary></entry><entry><title type="html">Cost Effective Programming</title><link href="http://localhost:4000/2024/01/02/Cost-Effective-Programming.html" rel="alternate" type="text/html" title="Cost Effective Programming" /><published>2024-01-02T23:39:17+00:00</published><updated>2024-01-02T23:39:17+00:00</updated><id>http://localhost:4000/2024/01/02/Cost-Effective-Programming</id><content type="html" xml:base="http://localhost:4000/2024/01/02/Cost-Effective-Programming.html"><![CDATA[<h2 id="introduction">Introduction</h2>
<p>Optimizing code efficiency is not only a best practice for creating robust and responsive software but also a strategic imperative for cost-effective development. By enhancing the performance of your code, you can directly impact infrastructure costs, resource utilization, and overall system efficiency. This optimization not only leads to a more responsive and scalable application but can also translate into significant savings in terms of cloud hosting, operational expenses, and hardware requirements. In this guide, we’ll explore various tips and coding practices that empower developers to streamline their code, maximize resource utilization, and ultimately reduce associated expenses.</p>

<h2 id="code-improvements">Code Improvements</h2>

<h3 id="1-use-the-right-data-structures">1. Use the Right Data Structures</h3>
<p>Choose algorithms with lower time complexity for critical operations.
Consider data structures that are more efficient for the tasks at hand.</p>
<h5 id="examples">Examples:</h5>
<h6 id="using-a-map-for-fast-key-lookup">Using a Map for Fast Key Lookup</h6>
<div class="language-elixir highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">map</span> <span class="o">=</span> <span class="p">%{</span><span class="s2">"apple"</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span> <span class="s2">"orange"</span> <span class="o">=&gt;</span> <span class="mi">2</span><span class="p">,</span> <span class="s2">"banana"</span> <span class="o">=&gt;</span> <span class="mi">3</span><span class="p">}</span>
<span class="n">value</span> <span class="o">=</span> <span class="no">Map</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">map</span><span class="p">,</span> <span class="s2">"orange"</span><span class="p">)</span>
</code></pre></div></div>

<h6 id="finding-median">Finding Median</h6>
<div class="language-elixir highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">defmodule</span> <span class="no">FindingMedian</span> <span class="k">do</span>
  <span class="k">def</span> <span class="n">find_median_sorted_arrays1</span><span class="p">(</span><span class="n">nums1</span><span class="p">,</span> <span class="n">nums2</span><span class="p">)</span> <span class="k">do</span>
    <span class="n">nums3</span> <span class="o">=</span> <span class="p">(</span><span class="n">nums1</span> <span class="o">++</span> <span class="n">nums2</span><span class="p">)</span> <span class="o">|&gt;</span> <span class="no">Enum</span><span class="o">.</span><span class="n">sort</span>
    <span class="k">if</span> <span class="n">rem</span><span class="p">(</span><span class="n">length</span><span class="p">(</span><span class="n">nums3</span><span class="p">),</span> <span class="mi">2</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span> <span class="k">do</span>
        <span class="no">Enum</span><span class="o">.</span><span class="n">at</span><span class="p">(</span><span class="n">nums3</span><span class="p">,</span> <span class="n">trunc</span><span class="p">(</span><span class="n">length</span><span class="p">(</span><span class="n">nums3</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">))</span>
    <span class="k">else</span>
        <span class="n">num1</span> <span class="o">=</span> <span class="no">Enum</span><span class="o">.</span><span class="n">at</span><span class="p">(</span><span class="n">nums3</span><span class="p">,</span> <span class="n">trunc</span><span class="p">(</span><span class="n">length</span><span class="p">(</span><span class="n">nums3</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">))</span>
        <span class="n">num2</span> <span class="o">=</span> <span class="no">Enum</span><span class="o">.</span><span class="n">at</span><span class="p">(</span><span class="n">nums3</span><span class="p">,</span> <span class="n">trunc</span><span class="p">(</span><span class="n">length</span><span class="p">(</span><span class="n">nums3</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
        <span class="p">(</span><span class="n">num1</span><span class="o">+</span><span class="n">num2</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span>
    <span class="k">end</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="n">find_median_sorted_arrays2</span><span class="p">(</span><span class="n">nums1</span><span class="p">,</span> <span class="n">nums2</span><span class="p">)</span> <span class="k">do</span>
    <span class="n">nums3</span> <span class="o">=</span> <span class="p">(</span><span class="n">nums1</span> <span class="o">++</span> <span class="n">nums2</span><span class="p">)</span> <span class="o">|&gt;</span> <span class="no">Enum</span><span class="o">.</span><span class="n">sort</span>
    <span class="k">if</span> <span class="n">rem</span><span class="p">(</span><span class="n">length</span><span class="p">(</span><span class="n">nums3</span><span class="p">),</span> <span class="mi">2</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span> <span class="k">do</span>
        <span class="no">Enum</span><span class="o">.</span><span class="n">at</span><span class="p">(</span><span class="n">nums3</span><span class="p">,</span> <span class="n">trunc</span><span class="p">(</span><span class="n">length</span><span class="p">(</span><span class="n">nums3</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">))</span>
    <span class="k">else</span>
        <span class="n">middle</span> <span class="o">=</span> <span class="n">trunc</span><span class="p">(</span><span class="n">length</span><span class="p">(</span><span class="n">nums3</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">)</span>
        <span class="n">num1</span> <span class="o">=</span> <span class="no">Enum</span><span class="o">.</span><span class="n">at</span><span class="p">(</span><span class="n">nums3</span><span class="p">,</span> <span class="n">middle</span><span class="p">)</span>
        <span class="n">num2</span> <span class="o">=</span> <span class="no">Enum</span><span class="o">.</span><span class="n">at</span><span class="p">(</span><span class="n">nums3</span><span class="p">,</span> <span class="n">middle</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
        <span class="p">(</span><span class="n">num1</span><span class="o">+</span><span class="n">num2</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span>
    <span class="k">end</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="n">find_median_sorted_arrays3</span><span class="p">(</span><span class="n">nums1</span><span class="p">,</span> <span class="n">nums2</span><span class="p">)</span> <span class="k">do</span>
    <span class="n">nums3</span> <span class="o">=</span> <span class="p">(</span><span class="n">nums1</span> <span class="o">++</span> <span class="n">nums2</span><span class="p">)</span> <span class="o">|&gt;</span> <span class="no">Enum</span><span class="o">.</span><span class="n">sort</span>
    <span class="n">size</span> <span class="o">=</span> <span class="n">length</span><span class="p">(</span><span class="n">nums3</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">rem</span><span class="p">(</span><span class="n">size</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span> <span class="k">do</span>
        <span class="no">Enum</span><span class="o">.</span><span class="n">at</span><span class="p">(</span><span class="n">nums3</span><span class="p">,</span> <span class="n">trunc</span><span class="p">(</span><span class="n">size</span><span class="o">/</span><span class="mi">2</span><span class="p">))</span>
    <span class="k">else</span>
        <span class="n">middle</span> <span class="o">=</span> <span class="n">trunc</span><span class="p">(</span><span class="n">size</span><span class="o">/</span><span class="mi">2</span><span class="p">)</span>
        <span class="n">num1</span> <span class="o">=</span> <span class="no">Enum</span><span class="o">.</span><span class="n">at</span><span class="p">(</span><span class="n">nums3</span><span class="p">,</span> <span class="n">middle</span><span class="p">)</span>
        <span class="n">num2</span> <span class="o">=</span> <span class="no">Enum</span><span class="o">.</span><span class="n">at</span><span class="p">(</span><span class="n">nums3</span><span class="p">,</span> <span class="n">middle</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
        <span class="p">(</span><span class="n">num1</span><span class="o">+</span><span class="n">num2</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>
<p>In the code above, with 3 different versions for the same code, i saved 75ms for a 5000000 integer elements list input between the first and the last version. The first version is the most naive one, the second one is a little bit better, and the last one is the best one. The difference between the first and the last one is the use of a variable to store the length of the array. This way, we don’t have to calculate the length of the array every time we need it.</p>

<h3 id="2-code-profiling-and-optimization">2. Code Profiling and Optimization</h3>
<p>Regularly profile your code to identify performance bottlenecks.
Focus optimization efforts on the most time-consuming parts of your code.</p>
<h5 id="examples-1">Examples:</h5>
<h6 id="using-telemetry-to-profile-function-execution-time">Using :telemetry to Profile Function Execution Time</h6>
<div class="language-elixir highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="ss">:telemetry</span><span class="o">.</span><span class="n">attach</span><span class="p">(</span><span class="s2">"my_app_profile"</span><span class="p">,</span> <span class="p">[</span><span class="ss">:my_module</span><span class="p">,</span> <span class="ss">:my_function</span><span class="p">],</span> <span class="o">&amp;</span><span class="no">MyProfiler</span><span class="o">.</span><span class="n">profile</span><span class="o">/</span><span class="mi">3</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="3-lazy-loading-and-deferred-execution">3. Lazy Loading and Deferred Execution</h3>
<p>Implement lazy loading and deferred execution for resources and operations that are not immediately needed.
Load data or execute operations only when necessary to conserve resources.</p>
<h5 id="examples-2">Examples:</h5>
<h6 id="using-stream-to-lazily-load-data">Using Stream to Lazily Load Data</h6>
<div class="language-elixir highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">data_stream</span> <span class="o">=</span> <span class="no">Stream</span><span class="o">.</span><span class="n">resource</span><span class="p">(</span><span class="k">fn</span> <span class="o">-&gt;</span> <span class="no">File</span><span class="o">.</span><span class="n">stream!</span><span class="p">(</span><span class="s2">"large_file.txt"</span><span class="p">)</span> <span class="k">end</span><span class="p">,</span> <span class="o">&amp;</span><span class="no">IO</span><span class="o">.</span><span class="n">read</span><span class="o">/</span><span class="mi">1</span><span class="p">,</span> <span class="ss">close:</span> <span class="o">&amp;</span><span class="no">File</span><span class="o">.</span><span class="n">close</span><span class="o">/</span><span class="mi">1</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="4-caching-strategies">4. Caching Strategies</h3>
<p>Implement caching mechanisms to store and reuse frequently requested data.
Use caching for computations or results that do not change frequently.</p>

<h3 id="5-database-optimization">5. Database Optimization</h3>
<p>Optimize database queries by indexing columns and avoiding unnecessary joins.
Consider denormalization for read-heavy operations.
Use connection pooling to efficiently manage database connections.</p>
<h5 id="examples-3">Examples:</h5>
<h6 id="using-ecto-with-indexing-to-optimize-database-queries">Using Ecto with Indexing to Optimize Database Queries</h6>
<div class="language-elixir highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">query</span> <span class="o">=</span> <span class="n">from</span><span class="p">(</span><span class="n">u</span> <span class="ow">in</span> <span class="no">User</span><span class="p">,</span> <span class="ss">where:</span> <span class="n">u</span><span class="o">.</span><span class="n">age</span> <span class="o">&gt;</span> <span class="mi">21</span><span class="p">,</span> <span class="ss">order_by:</span> <span class="p">[</span><span class="ss">asc:</span> <span class="n">u</span><span class="o">.</span><span class="n">name</span><span class="p">],</span> <span class="ss">select:</span> <span class="n">u</span><span class="p">)</span>
<span class="no">Repo</span><span class="o">.</span><span class="n">all</span><span class="p">(</span><span class="n">query</span><span class="p">)</span>
</code></pre></div></div>
<h6 id="ecto-async-queries-with-task">Ecto Async Queries with Task</h6>
<div class="language-elixir highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Example: Ecto Async Queries with Task</span>
<span class="n">task</span> <span class="o">=</span> <span class="no">Task</span><span class="o">.</span><span class="n">async</span><span class="p">(</span><span class="k">fn</span> <span class="o">-&gt;</span>
  <span class="no">Repo</span><span class="o">.</span><span class="n">all</span><span class="p">(</span><span class="n">from</span> <span class="n">u</span> <span class="ow">in</span> <span class="no">User</span><span class="p">,</span> <span class="ss">where:</span> <span class="n">u</span><span class="o">.</span><span class="n">age</span> <span class="o">&gt;</span> <span class="mi">21</span><span class="p">)</span>
<span class="k">end</span><span class="p">)</span>

<span class="n">result</span> <span class="o">=</span> <span class="no">Task</span><span class="o">.</span><span class="n">await</span><span class="p">(</span><span class="n">task</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="6-parallelism-and-concurrency">6. Parallelism and Concurrency</h3>
<p>Utilize parallel processing and concurrency to execute tasks concurrently when applicable.
Take advantage of multi-core architectures to improve performance.</p>
<h5 id="examples-4">Examples:</h5>
<h6 id="using-task-to-execute-tasks-concurrently">Using Task to Execute Tasks Concurrently</h6>
<div class="language-elixir highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">task1</span> <span class="o">=</span> <span class="no">Task</span><span class="o">.</span><span class="n">async</span><span class="p">(</span><span class="k">fn</span> <span class="o">-&gt;</span> <span class="n">expensive_operation_1</span><span class="p">()</span> <span class="k">end</span><span class="p">)</span>
<span class="n">task2</span> <span class="o">=</span> <span class="no">Task</span><span class="o">.</span><span class="n">async</span><span class="p">(</span><span class="k">fn</span> <span class="o">-&gt;</span> <span class="n">expensive_operation_2</span><span class="p">()</span> <span class="k">end</span><span class="p">)</span>
<span class="p">{</span><span class="n">result1</span><span class="p">,</span> <span class="n">result2</span><span class="p">}</span> <span class="o">=</span> <span class="p">{</span><span class="no">Task</span><span class="o">.</span><span class="n">await</span><span class="p">(</span><span class="n">task1</span><span class="p">),</span> <span class="no">Task</span><span class="o">.</span><span class="n">await</span><span class="p">(</span><span class="n">task2</span><span class="p">)}</span>
</code></pre></div></div>

<h3 id="8-minimize-network-requests">8. Minimize Network Requests</h3>
<p>Reduce the number of external API calls and network requests.
Implement batch processing for multiple requests to minimize the overhead of establishing connections.</p>
<h5 id="examples-5">Examples:</h5>
<h6 id="using-httpoison-to-batch-requests">Using HTTPoison to Batch Requests</h6>
<div class="language-elixir highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">tasks</span> <span class="o">=</span> <span class="no">Enum</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="n">urls</span><span class="p">,</span> <span class="k">fn</span> <span class="n">url</span> <span class="o">-&gt;</span> <span class="no">Task</span><span class="o">.</span><span class="n">async</span><span class="p">(</span><span class="k">fn</span> <span class="o">-&gt;</span> <span class="no">HTTPoison</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">url</span><span class="p">)</span> <span class="k">end</span><span class="p">)</span> <span class="k">end</span><span class="p">)</span>
<span class="n">responses</span> <span class="o">=</span> <span class="no">Enum</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="n">tasks</span><span class="p">,</span> <span class="o">&amp;</span><span class="no">Task</span><span class="o">.</span><span class="n">await</span><span class="o">/</span><span class="mi">1</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="10-optimize-frontend-assets">10. Optimize Frontend Assets</h3>
<p>Compress and minify CSS, JavaScript, and other frontend assets.
Use content delivery networks (CDNs) to distribute static assets globally.</p>
<h5 id="examples-6">Examples:</h5>
<h6 id="using-webpack-to-minify-javascript">Using Webpack to Minify JavaScript</h6>
<p>Webpack can be configured to compress and minify frontend assets</p>

<h3 id="11-memory-management">11. Memory Management</h3>
<p>Efficiently manage memory usage by releasing unused objects and avoiding memory leaks.
Use appropriate data structures to minimize memory overhead.</p>
<h5 id="examples-7">Examples:</h5>
<h6 id="process-registry-for-resource-cleanup">Process Registry for Resource Cleanup</h6>
<div class="language-elixir highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="ss">:global</span><span class="o">.</span><span class="n">register_name</span><span class="p">(</span><span class="ss">:my_resource</span><span class="p">,</span> <span class="n">self</span><span class="p">())</span>
<span class="ss">:global</span><span class="o">.</span><span class="n">unregister_name</span><span class="p">(</span><span class="ss">:my_resource</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="12-implement-automated-testing-to-catch-performance-issues-early-in-development">12. Implement automated testing to catch performance issues early in development.</h3>
<p>Regularly profile and benchmark your code to ensure ongoing optimization.</p>
<h5 id="examples-8">Examples:</h5>
<h6 id="using-exunit-to-test-for-performance">Using ExUnit to Test for Performance</h6>
<div class="language-elixir highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">defmodule</span> <span class="no">MyModuleTest</span> <span class="k">do</span>
  <span class="kn">use</span> <span class="no">ExUnit</span><span class="o">.</span><span class="no">Case</span>

  <span class="n">test</span> <span class="s2">"should perform efficiently"</span> <span class="k">do</span>
    <span class="c1"># Perform tests to ensure efficient code execution</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<h2 id="lets-break-this-into-numbers">Let’s break this into numbers</h2>
<p>Now, let’s break down the calculations for potential cost savings using AWS as an example. Please note that the actual cost structure may vary based on specific AWS services you are using and the pricing model applicable to those services.</p>

<p>Let’s assume the original response time (ORT) is 10 milliseconds, and the improved response time (IRT) is 9.6 milliseconds (10 - 0.4).</p>

<h4 id="calculate-the-number-of-requests-per-hour">Calculate the Number of Requests per Hour:</h4>

<p>For the original response time (ORT):</p>
<ul>
  <li>Requests per Hour (ORT) = (3600 seconds) / (10 milliseconds / 1000) * 1000 = 360,000 requests/hour</li>
</ul>

<p>For the improved response time (IRT):</p>
<ul>
  <li>Requests per Hour (IRT) = (3600 seconds) / (9.6 milliseconds / 1000) * 1000 = 375,000 requests/hour</li>
</ul>

<h4 id="determine-the-cost-per-request">Determine the Cost per Request:</h4>

<p>Let’s say it’s $0.000001 per request.</p>

<h4 id="calculate-the-cost-savings-per-request">Calculate the Cost Savings per Request:</h4>

<p>Cost Savings per Request = (10 - 9.6) * $0.000001 = $0.0000004</p>

<h4 id="calculate-the-total-cost-savings-per-hour">Calculate the Total Cost Savings per Hour:</h4>

<p>Total Cost Savings per Hour = $0.0000004 * 360,000 = $0.144</p>

<h4 id="calculate-the-total-cost-savings-per-year">Calculate the Total Cost Savings per Year:</h4>

<p>Total Cost Savings per Year = $0.144 * 24 hours * 365 days = $1261.44</p>

<p>So, in this simplified example, improving the response time by 0.4 milliseconds could potentially save $0.144 per hour for 1000 requests. Keep in mind that these numbers are illustrative, and actual costs will depend on your specific AWS services and pricing. Always refer to the latest AWS pricing documentation for accurate and up-to-date information.</p>]]></content><author><name></name></author><summary type="html"><![CDATA[Introduction Optimizing code efficiency is not only a best practice for creating robust and responsive software but also a strategic imperative for cost-effective development. By enhancing the performance of your code, you can directly impact infrastructure costs, resource utilization, and overall system efficiency. This optimization not only leads to a more responsive and scalable application but can also translate into significant savings in terms of cloud hosting, operational expenses, and hardware requirements. In this guide, we’ll explore various tips and coding practices that empower developers to streamline their code, maximize resource utilization, and ultimately reduce associated expenses.]]></summary></entry></feed>